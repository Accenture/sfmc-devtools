export default Journey;
export type BuObject = import("../../types/mcdev.d.js").BuObject;
export type CodeExtract = import("../../types/mcdev.d.js").CodeExtract;
export type CodeExtractItem = import("../../types/mcdev.d.js").CodeExtractItem;
export type MetadataTypeItem = import("../../types/mcdev.d.js").MetadataTypeItem;
export type MetadataTypeItemDiff = import("../../types/mcdev.d.js").MetadataTypeItemDiff;
export type MetadataTypeItemObj = import("../../types/mcdev.d.js").MetadataTypeItemObj;
export type MetadataTypeMap = import("../../types/mcdev.d.js").MetadataTypeMap;
export type MetadataTypeMapObj = import("../../types/mcdev.d.js").MetadataTypeMapObj;
export type SoapRequestParams = import("../../types/mcdev.d.js").SoapRequestParams;
export type TemplateMap = import("../../types/mcdev.d.js").TemplateMap;
export type TypeKeyCombo = import("../../types/mcdev.d.js").TypeKeyCombo;
/**
 * @typedef {import('../../types/mcdev.d.js').BuObject} BuObject
 * @typedef {import('../../types/mcdev.d.js').CodeExtract} CodeExtract
 * @typedef {import('../../types/mcdev.d.js').CodeExtractItem} CodeExtractItem
 * @typedef {import('../../types/mcdev.d.js').MetadataTypeItem} MetadataTypeItem
 * @typedef {import('../../types/mcdev.d.js').MetadataTypeItemDiff} MetadataTypeItemDiff
 * @typedef {import('../../types/mcdev.d.js').MetadataTypeItemObj} MetadataTypeItemObj
 * @typedef {import('../../types/mcdev.d.js').MetadataTypeMap} MetadataTypeMap
 * @typedef {import('../../types/mcdev.d.js').MetadataTypeMapObj} MetadataTypeMapObj
 * @typedef {import('../../types/mcdev.d.js').SoapRequestParams} SoapRequestParams
 * @typedef {import('../../types/mcdev.d.js').TemplateMap} TemplateMap
 * @typedef {import('../../types/mcdev.d.js').TypeKeyCombo} TypeKeyCombo
 */
/**
 * Journey MetadataType
 * ! BETA RELEASE of journey support (v4.3.0); it so far only resolves a limited amount of dependencies and will likely break during cross-BU deployments!
 * id: A unique id of the journey assigned by the journeyâ€™s API during its creation
 * key: A unique id of the journey within the MID. Can be generated by the developer
 * definitionId: A unique UUID provided by Salesforce Marketing Cloud. Each version of a journey has a unique DefinitionID while the Id and Key remain the same. Version 1 will have id == definitionId
 *
 * @augments MetadataType
 */
declare class Journey extends MetadataType {
    /**
     * Retrieves Metadata of Journey
     *
     * @param {string} retrieveDir Directory where retrieved metadata directory will be saved
     * @param {void | string[]} [_] unused parameter
     * @param {void | string[]} [__] unused parameter
     * @param {string} [key] customer key of single item to retrieve
     * @returns {Promise.<MetadataTypeMapObj>} Promise
     */
    static retrieve(retrieveDir: string, _?: void | string[], __?: void | string[], key?: string): Promise<MetadataTypeMapObj>;
    /**
     * Updates a single item
     *
     * @param {MetadataTypeItem} metadata a single item
     * @returns {Promise} Promise
     */
    static update(metadata: MetadataTypeItem): Promise<any>;
    /**
     * Creates a single item
     *
     * @param {MetadataTypeItem} metadata a single item
     * @returns {Promise} Promise
     */
    static create(metadata: MetadataTypeItem): Promise<any>;
    /**
     * helper for Journey's {@link Journey.saveResults}. Gets executed after retreive of metadata type and
     *
     * @param {MetadataTypeMap} metadataMap key=customer key, value=metadata
     */
    static _postRetrieveTasksBulk(metadataMap: MetadataTypeMap): Promise<void>;
    /**
     * manages post retrieve steps
     *
     * @param {MetadataTypeItem} metadata a single item
     * @returns {Promise.<MetadataTypeItem>} Array with one metadata object
     */
    static postRetrieveTasks(metadata: MetadataTypeItem): Promise<MetadataTypeItem>;
    /**
     * helper for {@link Journey.postRetrieveTasks}
     *
     * @private
     * @param {MetadataTypeItem} metadata a single item
     */
    private static _postRetrieveTasks_activities;
    /**
     * prepares a TSD for deployment
     * ! BETA RELEASE of journey support (v4.3.0); it so far only resolves a limited amount of dependencies and will likely break during cross-BU deployments!
     *
     * @param {MetadataTypeItem} metadata of a single TSD
     * @returns {Promise.<MetadataTypeItem>} metadata object
     */
    static preDeployTasks(metadata: MetadataTypeItem): Promise<MetadataTypeItem>;
    /**
     * helper for {@link Journey.preDeployTasks}
     *
     * @private
     * @param {MetadataTypeItem} metadata a single item
     */
    private static _preDeployTasks_activities;
    /**
     * Gets executed after deployment of metadata type
     *
     * @param {MetadataTypeMap} upsertResults metadata mapped by their keyField as returned by update/create
     */
    static postDeployTasks(upsertResults: MetadataTypeMap): Promise<void>;
    /**
     * a function to publish the journey via API
     *
     * @param {string[]} keyArr keys or ids of the metadata
     * @param {MetadataTypeMap} [upsertResults] metadata mapped by their keyField as returned by update/create
     * @returns {Promise.<string[]>} Returns list of updated keys/ids that were published. Success could only be seen with a delay in the UI because the publish-endpoint is async
     */
    static publish(keyArr: string[], upsertResults?: MetadataTypeMap): Promise<string[]>;
    /**
     *
     * @param {string[]} executedKeyArr list of journey keys
     * @param {number} transactionalCounter how many transactiona-send journeys did we expect to refresh
     * @param {number} multiStepCounter how many multi-step journeys did we expect to refresh
     * @returns {Promise.<void>} -
     */
    static _reRetrieve(executedKeyArr: string[], transactionalCounter: number, multiStepCounter: number): Promise<void>;
    /**
     * helper for {@link Journey.publish} and {@link Journey.validate}
     *
     * @param {string} statusUrl URL to check the status of the publish request
     * @param {string} key journey-key or id for log messages
     * @param {string} name journey-name for log messages
     * @param {import('yocto-spinner').Spinner} spinner reference to spinner to allow stopping it when done
     * @param {number} [tries] number of tries used to check the status
     * @returns {Promise.<string>} key of the item that was published successfully
     */
    static _checkPublishStatus(statusUrl: string, key: string, name: string, spinner: import("yocto-spinner").Spinner, tries?: number): Promise<string>;
    /**
     * helper for {@link Journey._checkPublishStatus}
     *
     * @param {{status:string, errors:Array, warnings:Array}} response publishStatus response
     */
    static _showPublishStatusDetails(response: {
        status: string;
        errors: any[];
        warnings: any[];
    }): void;
    /**
     * a function to validate the journey via API
     *
     * @param {string[]} keyArr keys or ids of the metadata
     * @returns {Promise.<string[]>} Returns list of updated keys/ids that were published. Success could only be seen with a delay in the UI because the publish-endpoint is async
     */
    static validate(keyArr: string[]): Promise<string[]>;
    /**
     * TSD-specific refresh method that finds active TSDs and refreshes them
     *
     * @param {string[]} keyArr metadata keys
     * @returns {Promise.<string[]>} Returns list of keys that were refreshed
     */
    static refresh(keyArr: string[]): Promise<string[]>;
    /**
     * helper for {@link Journey.refresh} that pauses, publishes and starts a triggered send
     *
     * @param {string} key external key of triggered send item
     * @param {MetadataTypeMapObj} journeyCache metadata cache
     * @returns {Promise.<boolean>} true if refresh was successful
     */
    static _refreshItem(key: string, journeyCache: MetadataTypeMapObj): Promise<boolean>;
}
declare namespace Journey {
    let definition: {
        folderType: string;
        bodyIteratorField: string;
        dependencies: string[];
        dependencyGraph: {
            event: string[];
            dataExtension: string[];
            deliveryProfile: string[];
            list: string[];
            senderProfile: string[];
            sendClassification: string[];
            asset: string[];
            mobileMessage: string[];
            mobileKeyword: string[];
            mobileCode: string[];
        };
        folderIdField: string;
        hasExtended: boolean;
        idField: string;
        keyIsFixed: boolean;
        keyField: string;
        nameField: string;
        createdDateField: string;
        createdNameField: any;
        lastmodDateField: string;
        lastmodNameField: any;
        restPagination: boolean;
        restPageSize: number;
        maxKeyLength: number;
        type: string;
        typeDescription: string;
        typeRetrieveByDefault: boolean;
        typeName: string;
        priorityMapping: {
            High: number;
            Medium: number;
            Low: number;
        };
        fields: {
            activities: {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].id': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].key': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].name': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].description': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].type': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].outcomes': {
                skipValidation: boolean;
            };
            'activities[].arguments': {
                skipValidation: boolean;
            };
            'activities[].configurationArguments': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSendKey': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSendId': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.id': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.key': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.campaigns': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.suppressionLists': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.autoAddSubscribers': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.autoUpdateSubscribers': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.bccEmail': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.categoryId': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.ccEmail': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.created': {
                skipValidation: boolean;
            };
            'activities[].configurationArguments.triggeredSend.description': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.domainExclusions': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.dynamicEmailSubject': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.emailSubject': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.exclusionFilter': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.isSalesforceTracking': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.isMultipart': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.isSendLogging': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.isStoppedOnJobError': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.keyword': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.modified': {
                skipValidation: boolean;
            };
            'activities[].configurationArguments.triggeredSend.name': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.preHeader': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.replyToAddress': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.replyToDisplayName': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.suppressTracking': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.triggeredSendStatus': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.version': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.throttleOpens': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.throttleCloses': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.throttleLimit': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.isTrackingClicks': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.emailId': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.r__triggeredSend_key': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.senderProfileId': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.deliveryProfileId': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.r__senderProfile_key': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            ' activities[].configurationArguments.triggeredSend.sendClassificationId': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.r__deliveryProfile_key': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.r__sendClassification_key': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.r__list_PathName': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.publicationListId': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.r__list_PathName.publicationList': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.r__list_PathName.suppressionLists': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.r__dataExtension_key': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.r__dataExtension_key.domainExclusions': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.priority': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.c__priority': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.r__asset_name_readOnly': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.triggeredSend.r__asset_key': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.applicationExtensionKey': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.r__transactionalEmail_key': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.applicationExtensionId': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.isModified': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.isSimulation': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.googleAnalyticsCampaignName': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.useLLTS': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.fuelAgentRequested': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.r__triggeredSend_key': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.waitDuration': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.waitUnit': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.specifiedTime': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.timeZone': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.description': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.waitEndDateAttributeExpression': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.specificDate': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.waitForEventKey': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.schemaVersionId': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'activities[].configurationArguments.criteria': {
                skipValidation: boolean;
            };
            'activities[].configurationArguments.eventDataConfig': {
                skipValidation: boolean;
            };
            'activities[].metaData': {
                skipValidation: boolean;
            };
            'activities[].schema': {
                skipValidation: boolean;
            };
            categoryId: {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            channel: {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            createdDate: {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'defaults.email': {
                skipValidation: boolean;
            };
            'defaults.mobileNumber': {
                skipValidation: boolean;
            };
            'defaults.properties.analyticsTracking.enabled': {
                isCreateable: any;
                isUpdateable: any;
                retrieving: any;
                template: any;
            };
            'defaults.properties': {
                skipValidation: boolean;
            };
            'defaults.properties.analyticsTracking.analyticsType': {
                isCreateable: any;
                isUpdateable: any;
                retrieving: any;
                template: any;
            };
            'defaults.properties.analyticsTracking.urlDomainsToTrack': {
                isCreateable: any;
                isUpdateable: any;
                retrieving: any;
                template: any;
            };
            definitionId: {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            definitionType: {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            description: {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            entryMode: {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            executionMode: {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            exits: {
                skipValidation: boolean;
            };
            goals: {
                skipValidation: boolean;
            };
            healthStats: {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            id: {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            key: {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            lastPublishedDate: {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'metaData.templateId': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            modifiedDate: {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            name: {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            scheduledStatus: {
                isCreateable: any;
                isUpdateable: any;
                retrieving: any;
                template: any;
            };
            stats: {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            status: {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            triggers: {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].id': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].key': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].name': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].description': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].type': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].outcomes': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].arguments': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].arguments.startActivityKey': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].arguments.dequeueReason': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].arguments.lastExecutedActivityKey': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].arguments.filterResult': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].arguments.serializedObjectType': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].arguments.eventDefinitionId': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].arguments.eventDefinitionKey': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].arguments.dataExtensionId': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].arguments.automationId': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].arguments.r__event_key': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].arguments.r__dataExtension_key': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].configurationArguments': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].configurationArguments.eventDataConfig': {
                skipValidation: boolean;
            };
            'triggers[].configurationArguments.primaryObjectFilterCriteria': {
                skipValidation: boolean;
            };
            'triggers[].configurationArguments.relatedObjectFilterCriteria': {
                skipValidation: boolean;
            };
            'triggers[].configurationArguments.salesforceTriggerCriteria': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].configurationArguments.objectAPIName': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].configurationArguments.version': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].configurationArguments.contactKey': {
                skipValidation: boolean;
            };
            'triggers[].configurationArguments.contactPersonType': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].configurationArguments.primaryObjectFilterSummary': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].configurationArguments.relatedObjectFilterSummary': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].configurationArguments.eventDataSummary': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].configurationArguments.evaluationCriteriaSummary': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].configurationArguments.applicationExtensionKey': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].configurationArguments.passThroughArgument': {
                skipValidation: boolean;
            };
            'triggers[].configurationArguments.filterDefinitionId': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].configurationArguments.criteria': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].configurationArguments.schemaVersionId': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].configurationArguments.whoToInject': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].configurationArguments.objectApiName': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].configurationArguments.additionalObjectFilterCriteria': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].metaData': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].metaData.sourceInteractionId': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].metaData.entrySourceGroupConfigUrl': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].metaData.r__event_key': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].metaData.category': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].metaData.eventDefinitionId': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].metaData.eventDefinitionKey': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].metaData.chainType': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].metaData.configurationRequired': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].metaData.iconUrl': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            'triggers[].metaData.title': {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            version: {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            workflowApiVersion: {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
            metaData: {
                skipValidation: boolean;
            };
            notifiers: {
                skipValidation: boolean;
            };
            tags: {
                skipValidation: boolean;
            };
            r__folder_Path: {
                isCreateable: boolean;
                isUpdateable: boolean;
                retrieving: boolean;
                template: boolean;
            };
        };
    };
}
import MetadataType from './MetadataType.js';
//# sourceMappingURL=Journey.d.ts.map